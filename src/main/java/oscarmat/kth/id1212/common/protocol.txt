Title: Hangman-NIO Game Transfer Protocol
Author: Oscar Mattsson
E-mail: oscarmat@kth.se
Version: 1.1

This document describes the protocol used to communicate between CLIENT and
SERVER in the Hangman-NIO game.

For syntax descriptions in this document, words by themselves are mandatory
syntax elements. Words wrapped in "[]" are optional. Words wrapped in "<>" are
placeholders for commands or data structures. Pipe-separated ("|") values
wrapped in "()" indicate either one of the values may be used.
  For more generic structures, BNF syntax is used in conjunction with the rules
stated above.

--- INDEX ---
1. Message
2. Headers
    2.1 Message Length
    2.2 Message Type
        2.2.1 REQUEST
        2.2.2 REPLY
        2.2.3 BROADCAST
        2.2.4 TERMINATE
    2.3 Message ID
3. States
    3.1 INIT
    3.2 NO_GAME
    3.3 PLAYING
    3.4 ENDED
4. Actions
    4.1 ALIAS
    4.2 NEW_GAME
    4.3 PLAY
    4.4 LEADERBOARD

--- 1. Message ---
Each message consists of two parts; the header, and the actual data. The header
contains metadata such as how much data is being sent and what type of data is
being sent. A separator of two hash signs "##" is used to separate header
from data. The header is explained in detail in section 2.
  The data is a JSON-formatted string. The fields to be included depends on the
message type and the action type. Action types are explained in detail in
section 4.
  Three hash signs "###" is used to note the end of a message.
    - BNF Syntax: <message> ::= <header> "##" <data> "###"

--- 2. HEADERS ---
Each message starts with a header. The header consists of a sequence of fields,
which are described in the subsections of this chapter.
    - BNF Syntax: <header> ::= <header-fields>
        <header-fields> ::= <header-field> "," <header-fields> | <header-field>
        <header-field> ::= <field-name> ":" <field-value>

--- 2.1 Message Length ---
The message length indicates how many bytes of data the receiver should expect
to see before the message is complete. This value should not include the length
of the header.
    - Syntax: LENGTH:<message-length>
    - <message-length>: The length of the message, header excluded.

--- 2.2 Message Type ---
The message type indicates how a message should be handled and more importantly
whether or not the sender should expect a message in return.
    - Syntax: TYPE:<message-type>
    - <message-type>: One of the types described in the subsections of 2.2.

--- 2.2.1 REQUEST ---
    - Syntax:
        ID:<message-id>,LENGTH:<message-length>,TYPE:REQUEST##{
            state: <state>,
            type: <action-type>[, msg: <action-message>]
        }###
    - Description: A REQUEST message is sent by a CLIENT to request an operation
        on the SERVER. After the operation is complete, the SERVER should send a
        REPLY message back to the CLIENT.

--- 2.2.2 REPLY ---
    - Syntax:
        ID:<request-id>,LENGTH:<message-length>,TYPE:REPLY##{
            state: <state>,
            type: <action-type>,
            msg: <return-message>,
            status: { ok: <ok-status>[, msg: <error-message>] }
        }###
    - Description: A REPLY message is sent by the SERVER in response to a
        REQUEST message from a CLIENT. This message does not require a response.
        A REPLY message uses the same ID as the REQUEST message which triggered
        the reply.

--- 2.2.3 BROADCAST ---
    - Syntax:
        ID:<message-id>,LENGTH:<message-length>,TYPE:BROADCAST##{
            state: <state>,
            type: <action-type>,
            msg: <return-message>,
        }###
    - Description: A BROADCAST message is sent by the SERVER to ALL CLIENTS
        connected to that SERVER. This message does not require a response.

--- 2.2.4 TERMINATE ---
    - Syntax:
        ID:<message-id>,LENGTH:2,TYPE:TERMINATE##{}###
    - Description: A TERMINATE message is sent either from a CLIENT to the
        SERVER or from the SERVER to the CLIENT. The TERMINATE message indicates
        the SENDER is terminating their connection, and puts the connection in
        the ENDED state (see section 3.4). This message does not require a
        response, nor does it require any additional data to be sent with it.

--- 2.3 Message ID ---
The message ID should be unique for every message within a reasonable time span.
The ID consists of alphanumeric characters.
  A REPLY message uses the same ID as the REQUEST message it is replying to as
it is part of a message sequence.
    - Syntax: ID:<message-id>
    - <message-id>: Unique identifier for the message.

--- 3. States ---
The lifecycle of the connection between a CLIENT and a SERVER has four
different states. These states are INIT, PLAYING, NO_GAME and ENDED. Each of
these states have their own set of available actions to decide which messages
are valid for that particular state. See section 4 for more information about
actions.

--- 3.1 INIT ---
When a CLIENT connects to a SERVER, the connection is in the INIT state. At this
point the SERVER is waiting for information about the user of the CLIENT to set
up the session for the connection.
    - Allowed messages:
        * (REQUEST|REPLY):ALIAS
        * TERMINATE

--- 3.2 NO_GAME ---
The NO_GAME state signifies that there is currently no active game.
  Once an alias for the CLIENT has been assigned to the session, the connection
moves into the NO_GAME state, where no game has been started yet. The NO_GAME
state can also be reached from the PLAYING state when a game is finished,
making the old game instance obsolete.
    - Allowed messages:
        * (REQUEST|REPLY):NEW_GAME
        * BROADCAST:LEADERBOARD
        * TERMINATE

--- 3.3 PLAYING ---
When an active game instance exists, the connection is in the PLAYING state.
Once this game instance completes (game is lost/won), the state of the
connection goes from PLAYING to NO_GAME.
    - Allowed messages:
        * (REQUEST|REPLY):NEW_GAME
        * (REQUEST|REPLY):PLAY
        * BROADCAST:LEADERBOARD
        * TERMINATE

--- 3.4 ENDED ---
When a TERMINATE message is sent, the state of the connection becomes ENDED,
no matter which state the connection was in before. When the connection is in
the ENDED state, both SERVER and CLIENT should close their connections to each
other.
    - No allowed messages.

--- 4. Actions ---
Actions describe what the receiving party is expected to do when a message is
received.

--- 4.1 ALIAS ---
The CLIENT sends a REQUEST message with the desired alias to the SERVER. This
either starts a new session bound to that alias, or picks up an old session
bound to that alias. The SERVER sends a REPLY message with the current state of
the session.
  If the ALIAS message is successful, the state of the connection will move from
INIT to NO_GAME.
    - States: INIT
    - Request Syntax:
        ID:<message-id>,LENGTH:<message-length>,TYPE:REQUEST##{
            state:INIT,
            type: ALIAS,
            msg: { name: <String> }
        }###
    - Reply Syntax:
        ID:<request-id>,LENGTH:<message-length>,TYPE:REPLY##{
            type: (INIT|NO_GAME),
            msg: {
                name: <String>,
                score: <Integer>,
                leaderboard: <Array>
            },
            status: { ok: <Boolean>[, msg: <error-message>]
        }###

 --- 4.2 NEW_GAME ---
The CLIENT sends a REQUEST message to the SERVER with the NEW_GAME action.
This causes the SERVER to start a new game session and return the state of that
session in a REPLY message to the CLIENT.
  If the NEW_GAME message is successful, the state of the connection will move
from NO_GAME to PLAYING.
    - States: NO_GAME, PLAYING
    - Request Syntax:
        ID:<message-id>,LENGTH:<message-length>,TYPE:REQUEST##{
            state: (NO_GAME|PLAYING)
            type: NEW_GAME
        }###
    - Reply Syntax:
        ID:<request-id>,LENGTH:<message-length>,TYPE:REPLY##{
            state: (NO_GAME|PLAYING),
            type: NEW_GAME,
            msg: {
                gamestate: {
                    failedAttempts: <Integer>,
                    maxAttempts: <Integer>,
                    wordState: <String>
                }
            },
            status: { ok: <Boolean>[, msg: <error-message>] }
       }###

--- 4.3 PLAY ---
The CLIENT sends a REQUEST message to the SERVER with the PLAY action. This
causes the SERVER to perform a move on behalf of the CLIENT in the active game
session.
  If the PLAY message causes the game to be either lost or won, the game session
is over and the state of the connection will move from PLAYING to NO_GAME.
    - States: PLAYING
    - Request Syntax:
        ID:<message-id>,LENGTH:<message-length>,TYPE:REQUEST##{
            state: PLAYING,
            type: PLAY,
            msg: {
                guess: <String>
            }
        }###
    - Reply Syntax (game not over):
        ID:<request-id>,LENGTH:<message-length>,TYPE:REPLY##{
            state: PLAYING,
            type: PLAY,
            msg: {
                guesses: <Array>,
                gamestate: {
                    failedAttempts: <Integer>,
                    maxAttempts: <Integer>,
                    wordState: <String>
                }
            },
            status: { ok: <Boolean>[, msg: <error-message>] }
        }###
    - Reply Syntax (game over):
        ID:<request-id>,LENGTH:<message-length>,TYPE:REPLY##{
            state: NO_GAME,
            type: PLAY,
            msg: {
                score: <Integer>,
                win: <Boolean>
                gamestate: {
                    failedAttempts: <Integer>,
                    maxAttempts: <Integer>,
                    wordState: <String>
                }
            },
            status: { ok: <Boolean>[, msg: <error-message>] }
        }###

--- 4.4 LEADERBOARD ---
When a game is ended, that CLIENT's score is updated and so the leaderboard is
updated. When this happens, the SERVER should BROADCAST the updated leaderboard
to all CLIENTs.
    - States: NO_GAME, PLAYING
    - Syntax:
        ID:<message-id>,LENGTH:<message-length>,TYPE:BROADCAST##{
            state: (NO_GAME|PLAYING),
            type: LEADERBOARD,
            msg: {
                leaderboard: <Array>
            }
        }###
